// 0x6080604052 348015600e575f80fd5b5060a58061001b5f395ff3fe6080604052348015600e575f80fd5b50600436106030575f3560e01c8063cdfead2e146034578063e026c017146045575b5f80fd5b6043603f3660046059565b5f55565b005b5f5460405190815260200160405180910390f35b5f602082840312156068575f80fd5b503591905056fea2646970667358221220980ac8943021213b79b5c64bf1cf6912313f6103ef0e84513355325a5d7b0d3e64736f6c63430008140033

// 3 sections:
// 1. Contract Creation
// 2. Runtime (what actually is stored in the blockchain)
// 3. Metadata (details about compiler version etc...)


// 0x6080604052 -> Contract Creation Code
// Free Memory Pointer
PUSH1 0x80              // [0x80]
PUSH1 0x40              // [0x40, 0x80]  
MSTORE                  // []       // Memory 0x40 -> 0x80

// If someone sent value with the call then revert!
// Otherwise, jump, to continue execution
CALLVALUE               // [msg.value]
DUP1                    // [msg.value, msg.value]
ISZERO                  // [msg.value == 0, msg.value] => If msg.value == 0, then o/p 1 => [1,0]
PUSH1 0x0e              // [0x0e, msg.value == 0, msg.value]
JUMPI                   // [msg.value] // If msg.value == 0, then go to `0x0e` // If msg.value != 0 continue
// Jump dest if msg.value == 0, if msg.value == 0

PUSH0                   // [0x00, msg.value]
DUP1                    // [0x00, 0x00, msg.value]
REVERT                  // [msg.value]

// Jump dest if msg.value == 0
// Sticks the runtime code on chain
// Before JUMPI stack contains [msg.value]
JUMPDEST                 // [msg.value]
POP                      // []
PUSH1 0xa5               // [0xa5]
DUP1                     // [0xa5, 0xa5]
PUSH2 0x001b             // [0x001b, 0xa5, 0xa5] 
PUSH0                    // [0x00, 0x001b, 0xa5, 0xa5]
CODECOPY                 // [0xa5]            Memory:[runtime code]
PUSH0                    // [0x00, 0xa5]
RETURN                   // []
INVALID                  // []
// INVALID signals the end of the contract creation code

// 2. Runtime code
// Entry point of all calls
// In solidity entry point will be whatever opcode is deployed on chain
// In huff entry point was main
PUSH1 0x80               // [0x80]
PUSH1 0x40               // [0x40]
MSTORE                   // []      // Memory 0x40 -> 0x80

// check for msg.value and if given Jump, else revert
CALLVALUE                // [msg.value]
DUP1                     // [msg.value, msg.value]
ISZERO                   // [msg.value == 0, msg.value]
PUSH1 0x0e               // [0x0e, msg.value == 0, msg.value] // pc
JUMPI                    // [msg.value] // If msg.value == 0, then go to `0x0e` // If msg.value != 0 continue
// Jump to continue! Jump to next JumpDest

PUSH0                    // [0x00, msg.value]
DUP1                     // [0x00, 0x00, msg.value]
REVERT                   // [msg.value]

// Jump dest if msg.value == 0, if msg.value == 0
// Before JUMPI stack contains [msg.value]
// This is checking to see if there is enough calldata for a function selector!
JUMPDEST                 // [msg.value]
POP                      // []
PUSH1 0x04               // [0x04]
CALLDATASIZE             // [calldata_size, 0x04] // when we call a function, calldata will be provided
LT                       // [calldata_size < 0x04]  // calldata_size < 0x04 ? 1 : 0
PUSH1 0x30               // [0x30, calldata_size < 0x04]
JUMPI                    // [] // Jump to `0x30` if calldata_size < 0x04, or continue
// Jump to continue! Jump to next JumpDest, if calldata_size < 0x04 -> jump to calldata_jump
// since we have don't have a fallback fn, if the size of the calldata is too small, it will jump

// If the calldata_size is big enough, it will continue
// Function dispatching in solidity
PUSH0                    // [0x00]
CALLDATALOAD             // [32 bytes of calldata]
PUSH1 0xe0               // [0xe0, 32 bytes of calldata]
SHR                      // [function_selector] // shift the calldata value by whatever is at top of the stack 
// shift calldata by `0xe0` which is `224`// calldata >> 224 
// Output will be pushed on the stack
// We are striping `function_selector` from the calldata

// Function dispatching for `updateHorseNumber`
DUP1                     // [func_selector, func_selector]
PUSH4 0xcdfead2e         // [0xcdfead2e, func_selector, func_selector] // 0xcdfead2e is the function_selector for `updateHorseNumber`
EQ                       // [0xcdfead2e == func_selector, func_selector]  // if a == b ? 1 : 0
PUSH1 0x34               // [0x34, 0xcdfead2e == func_selector, func_selector]
JUMPI                    // [func_selector] // programCounter = 0x34 // condition is 0xcdfead2e == func_selector
// If the condition is true, JUMP to `0x34`
// If not continue


// Function dispatching for `readNumberOfHorses`
DUP1                     // [func_selector, func_selector]
PUSH4 0xe026c017         // [0xe026c017, func_selector, func_selector] // 0xe026c017 is the function_selector for `readNumberOfHorses`
EQ                       // [0xe026c017 == func_selector, func_selector]
PUSH1 0x45               // [0x45, 0xe026c017 == func_selector, func_selector]
JUMPI                    // [func_selector] // programCounter = 0x45 // condition is 0xe026c017 == func_selector
// If the condition is true, JUMP to `0x45`
// If not continue
// If no function selectors were matched
// It will revert from the below revert

// calldata_jump
// Revert JumpDest
JUMPDEST                // []
PUSH0                   // [0x00]
DUP1                    // [0x00, 0x00]
REVERT                  // []
// Revert If the calldata size is too small

JUMPDEST
PUSH1 0x43
PUSH1 0x3f
CALLDATASIZE
PUSH1 0x04
PUSH1 0x59
JUMP
JUMPDEST
PUSH0
SSTORE
JUMP
JUMPDEST
STOP
JUMPDEST
PUSH0
SLOAD
PUSH1 0x40
MLOAD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
PUSH0
PUSH1 0x20
DUP3
DUP5
SUB
SLT
ISZERO
PUSH1 0x68
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
CALLDATALOAD
SWAP2
SWAP1
POP
JUMP
INVALID
LOG2
PUSH5 0x6970667358
INVALID
SLT
SHA3
SWAP9
EXP
INVALID
SWAP5
ADDRESS
INVALID
INVALID
EXTCODESIZE
PUSH26 0xb5c64bf1cf6912313f6103ef0e84513355325a5d7b0d3e64736f
PUSH13 0x63430008140033


// 1. Contract Creation Code
// 0x6080604052
// This setup will be same for every solidity smart contract
// This is also known as Free Memory Pointer
// 0x60 -> PUSH1	
// Place 1 byte item on stack
// PUSH1 0x80        // [0x80]
// PUSH1 0x40        // [0x40, 0x80] // top of the stack contains `0x40` and botttom contains `0x80`
// MSTORE            // []
// Stack input
// 1. offset: offset in the memory in bytes.
// 2. value: 32-byte value to write in the memory.
// `offset` will be whatever present at the top of the stack
// `value` will be whatever present at the bottom
// Inside the memory at position `0x40` save the value `0x80` 
// refer memory-breakdown.md for more details

// During contract creation code or run time code
// Solidity will always load the free memory pointer
// which means it will check which is the current memory slot where value can be placed

// CALLVALUE
// It dosen't take any input
// Stack output
// value: the value of the current call in wei.
// CALLVALUE is checking the msg.value and putting that on the stack [msg.value]

// Dup1
// duplicate whatever is present at the top of the stack
// [msg.value] was at the top
// it will be duplicated
// [msg.value, msg.value]

// ISZERO
// Stack input
// a: integer.
// Stack output
// a == 0: 1 if a is 0, 0 otherwise.
// top of the stack will contain [msg.value, msg.value]
// which is [0,0]
// since a is top of the stack
// which is 0
// a == 0 , then 1 will be ouputted to the stack
// 1 will placed back in the stack
// [1,0] will be in the stack

// PUSH1 0x0e
// push `0x0e` on top of the stack
// [0x0e, msg.value == 0, msg.value]

// JUMPI
// Stack input
// counter: byte offset in the deployed code where execution will continue from. Must be a JUMPDEST instruction.
// b: the program counter will be altered with the new value only if this value is different from 0. Otherwise, the program counter is simply incremented and the next instruction will be executed.
// counter will be whatever is at top of the stack
// b: condition to check whether to jump or not
// [0x0e, msg.value == 0, msg.value]
// b will be `msg.value == 0`
// since `msg.value == 0` will return `1` according to ISZERO
// JUMPI will get executed
// stack will only contain [msg.value]

// During contract creation, if msg.value is 0
// Then it will jump to the JumpDest

// CODECOPY
// Copy code running in current environment to memory
// Stack input
// 1. destOffset: byte offset in the memory where the result will be copied.
// 2. offset: byte offset in the code to copy.
// 3. size: byte size to copy.
// [0x00, 0x001b, 0xa5, 0xa5]
// destOffset -> 0x00
// offset -> 0x001b
// size -> 0xa5
// 0x00 is destOffset which means nothing to offset
// 0x001b is offset, which means
// whatever is at line 27 push it in memory
// size of it will be 0xa5 (165)

// [0xa5] will be only present at the stack after `CODECOPY`

// [0x00, 0xa5] in stack
// Stack input
// offset: byte offset in the memory in bytes, to copy what will be the return data of this context.
// size: byte size to copy (size of the return data).
// Return both of these

// Finally, we know
// CODECOPY is `0xa5` long
// we are returning the entire memory
// which has run time code and
// sticking them on chain as a smart contract

// Since the functions is marked as payable
// if msg.value is sent with the tx, then it will revert