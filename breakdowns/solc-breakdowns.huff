// 0x6080604052 348015600e575f80fd5b5060a58061001b5f395ff3fe6080604052348015600e575f80fd5b50600436106030575f3560e01c8063cdfead2e146034578063e026c017146045575b5f80fd5b6043603f3660046059565b5f55565b005b5f5460405190815260200160405180910390f35b5f602082840312156068575f80fd5b503591905056fea2646970667358221220980ac8943021213b79b5c64bf1cf6912313f6103ef0e84513355325a5d7b0d3e64736f6c63430008140033

// 3 sections:
// 1. Contract Creation
// 2. Runtime (what actually is stored in the blockchain)
// 3. Metadata (details about compiler version etc...)


// 0x6080604052 -> Contract Creation Code
// Free Memory Pointer
PUSH1 0x80              // [0x80]
PUSH1 0x40              // [0x40, 0x80]  
MSTORE                  // []       // Memory 0x40 -> 0x80

// If someone sent value with the call then revert!
// Otherwise, jump, to continue execution
CALLVALUE               // [msg.value]
DUP1                    // [msg.value, msg.value]
ISZERO                  // [msg.value == 0, msg.value] => If msg.value == 0, then o/p 1 => [1,0]
PUSH1 0x0e              // [0x0e, msg.value == 0, msg.value]
JUMPI                   // [msg.value]
PUSH0                   // [0x00, msg.value]
DUP1                    // [0x00, 0x00, msg.value]
REVERT                  // [msg.value]

// Jump dest if msg.value == 0
// Sticks the runtime code on chain
// Before JUMPI stack contains [msg.value]
JUMPDEST                 // [msg.value]
POP                      // []
PUSH1 0xa5               // [0xa5]
DUP1                     // [0xa5, 0xa5]
PUSH2 0x001b             // [0x001b, 0xa5, 0xa5] 
PUSH0                    // [0x00, 0x001b, 0xa5, 0xa5]
CODECOPY                 // [0xa5]            Memory:[runtime code]
PUSH0                    // [0x00, 0xa5]
RETURN                   // []
INVALID                  // []
// INVALID signals the end of the contract creation code

PUSH1 0x80
PUSH1 0x40
MSTORE
CALLVALUE
DUP1
ISZERO
PUSH1 0x0e
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
PUSH1 0x04
CALLDATASIZE
LT
PUSH1 0x30
JUMPI
PUSH0
CALLDATALOAD
PUSH1 0xe0
SHR
DUP1
PUSH4 0xcdfead2e
EQ
PUSH1 0x34
JUMPI
DUP1
PUSH4 0xe026c017
EQ
PUSH1 0x45
JUMPI
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH1 0x43
PUSH1 0x3f
CALLDATASIZE
PUSH1 0x04
PUSH1 0x59
JUMP
JUMPDEST
PUSH0
SSTORE
JUMP
JUMPDEST
STOP
JUMPDEST
PUSH0
SLOAD
PUSH1 0x40
MLOAD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
PUSH0
PUSH1 0x20
DUP3
DUP5
SUB
SLT
ISZERO
PUSH1 0x68
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
CALLDATALOAD
SWAP2
SWAP1
POP
JUMP
INVALID
LOG2
PUSH5 0x6970667358
INVALID
SLT
SHA3
SWAP9
EXP
INVALID
SWAP5
ADDRESS
INVALID
INVALID
EXTCODESIZE
PUSH26 0xb5c64bf1cf6912313f6103ef0e84513355325a5d7b0d3e64736f
PUSH13 0x63430008140033


// 1. Contract Creation Code
// 0x6080604052
// This setup will be same for every solidity smart contract
// This is also known as Free Memory Pointer
// 0x60 -> PUSH1	
// Place 1 byte item on stack
// PUSH1 0x80        // [0x80]
// PUSH1 0x40        // [0x40, 0x80] // top of the stack contains `0x40` and botttom contains `0x80`
// MSTORE            // []
// Stack input
// 1. offset: offset in the memory in bytes.
// 2. value: 32-byte value to write in the memory.
// `offset` will be whatever present at the top of the stack
// `value` will be whatever present at the bottom
// Inside the memory at position `0x40` save the value `0x80` 
// refer memory-breakdown.md for more details

// During contract creation code or run time code
// Solidity will always load the free memory pointer
// which means it will check which is the current memory slot where value can be placed

// CALLVALUE
// It dosen't take any input
// Stack output
// value: the value of the current call in wei.
// CALLVALUE is checking the msg.value and putting that on the stack [msg.value]

// Dup1
// duplicate whatever is present at the top of the stack
// [msg.value] was at the top
// it will be duplicated
// [msg.value, msg.value]

// ISZERO
// Stack input
// a: integer.
// Stack output
// a == 0: 1 if a is 0, 0 otherwise.
// top of the stack will contain [msg.value, msg.value]
// which is [0,0]
// since a is top of the stack
// which is 0
// a == 0 , then 1 will be ouputted to the stack
// 1 will placed back in the stack
// [1,0] will be in the stack

// PUSH1 0x0e
// push `0x0e` on top of the stack
// [0x0e, msg.value == 0, msg.value]

// JUMPI
// Stack input
// counter: byte offset in the deployed code where execution will continue from. Must be a JUMPDEST instruction.
// b: the program counter will be altered with the new value only if this value is different from 0. Otherwise, the program counter is simply incremented and the next instruction will be executed.
// counter will be whatever is at top of the stack
// b: condition to check whether to jump or not
// [0x0e, msg.value == 0, msg.value]
// b will be `msg.value == 0`
// since `msg.value == 0` will return `1` according to ISZERO
// JUMPI will get executed
// stack will only contain [msg.value]

// During contract creation, if msg.value is 0
// Then it will jump to the JumpDest

// CODECOPY
// Copy code running in current environment to memory
// Stack input
// 1. destOffset: byte offset in the memory where the result will be copied.
// 2. offset: byte offset in the code to copy.
// 3. size: byte size to copy.
// [0x00, 0x001b, 0xa5, 0xa5]
// destOffset -> 0x00
// offset -> 0x001b
// size -> 0xa5
// 0x00 is destOffset which means nothing to offset
// 0x001b is offset, which means
// whatever is at line 27 push it in memory
// size of it will be 0xa5 (165)

// [0xa5] will be only present at the stack after `CODECOPY`

// [0x00, 0xa5] in stack
// Stack input
// offset: byte offset in the memory in bytes, to copy what will be the return data of this context.
// size: byte size to copy (size of the return data).
// Return both of these

// Finally, we know
// CODECOPY is `0xa5` long
// we are returning the entire memory
// which has run time code and
// sticking them on chain as a smart contract